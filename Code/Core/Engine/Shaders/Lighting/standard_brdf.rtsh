#include "../interlop.hlsli"
#include "../root_signature.hlsli"
#include "../include/rt_common.hlsli"
#include "../include/lighting_common.hlsli"
#include "../include/ddgi_common.hlsli"
#include "../include/math.hlsli"

GlobalRootSignature kBindlessRootSignature =
{
  BINDLESS_ROOT_SIGNATURE
};

TriangleHitGroup kHitGroup = 
{
  "", // Any hit
  "", // Closest hit
};

RaytracingShaderConfig kShaderConfig = 
{
  sizeof(Payload), // Max payload size
  8,  // Max attribute size: sizeof(unorm float2) -> Barycentric
};

RaytracingPipelineConfig kPipelineConfig = 
{
  1, // Max trace recursion depth
};

ConstantBuffer<StandardBrdfSrt> g_Srt : register(b0);


[shader("raygeneration")]
void ray_gen()
{
  uint2 launch_index      = DispatchRaysIndex().xy;
  uint2 launch_dimensions = DispatchRaysDimensions().xy;

  Payload payload;

  Texture2D<uint>             gbuffer_material_ids     = DEREF(g_Srt.gbuffer_material_ids);
  Texture2D<unorm float4>     gbuffer_diffuse_metallic = DEREF(g_Srt.gbuffer_diffuse_rgb_metallic_a);
  Texture2D<float4>           gbuffer_normal_roughness = DEREF(g_Srt.gbuffer_normal_rgb_roughness_a);
  Texture2D<float>            gbuffer_depth            = DEREF(g_Srt.gbuffer_depth);
                                                         
  ConstantBuffer<DDGIVolDesc> vol_desc                 = DEREF(g_Srt.ddgi_vol_desc);
  Texture2DArray<float4>      probe_irradiance         = DEREF(g_Srt.ddgi_probe_irradiance);
  RWTexture2D<float4>         render_target            = DEREF(g_Srt.render_target);

  DirectionalLight            directional_light        = g_ViewportBuffer.directional_light;


  uint   material_id  = gbuffer_material_ids    [launch_index];
  float3 normal       = gbuffer_normal_roughness[launch_index].xyz;
  float  depth        = gbuffer_depth           [launch_index];

  float2 screen_size;
  gbuffer_depth.GetDimensions(screen_size.x, screen_size.y);


  float3 ws_pos       = screen_to_world(float3(float2(launch_index) + 0.5f, depth), screen_size).xyz;

  if (material_id == 0)
  {
    render_target[launch_index] = float4(0.0f, 0.0f, 0.0f, 1.0f);
    return;
  }

  float  shadow_atten    = light_visibility(
    directional_light.direction.xyz,
    ws_pos,
    normal,
    1e27f,
    0.001f
  );

  float3 view_direction  = normalize(g_ViewportBuffer.camera_world_pos.xyz - ws_pos);

  float3 direct_lighting = evaluate_directional_light(
    directional_light.direction.xyz,
    directional_light.diffuse.rgb, 
    directional_light.intensity,
    view_direction,
    normal,
    0.2f,
    0.0f,
    1.0f
  ) * saturate(shadow_atten);

  float3 cam_dir         = normalize(ws_pos - g_ViewportBuffer.camera_world_pos.xyz);


  float3 surface_bias    = get_surface_bias(normal, cam_dir, vol_desc);
  float3 indirect        = get_vol_irradiance(ws_pos, surface_bias, normal, vol_desc, probe_irradiance);

  float3 irradiance      = direct_lighting + saturate(indirect);

  float3 color           = payload.t < 0.0f ? float3(0.0f, 0.0f, 0.0f) : irradiance;

  render_target[launch_index] = float4(color, 1.0f);
}

[shader("miss")]
void miss(inout Payload payload)
{
  payload.t = -1.0f;
}
