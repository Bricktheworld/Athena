#include "../interlop.hlsli"
#include "../root_signature.hlsli"
#include "../include/rt_common.hlsli"
#include "../include/lighting_common.hlsli"
#include "../include/math.hlsli"
#include "../include/ddgi_common.hlsli"
#include "../include/debug_draw.hlsli"

GlobalRootSignature kBindlessRootSignature =
{
  BINDLESS_ROOT_SIGNATURE
};

TriangleHitGroup kHitGroup = 
{
  "", // Any hit
  "hit", // Closest hit
};

RaytracingShaderConfig kShaderConfig = 
{
  sizeof(Payload), // Max payload size
  8,  // Max attribute size: sizeof(unorm float2) -> Barycentric
};

RaytracingPipelineConfig kPipelineConfig = 
{
  1, // Max trace recursion depth
};

ConstantBuffer<ProbeTraceSrt> g_Srt : register(b0);

[shader("raygeneration")]
void ray_gen()
{
  uint2 launch_index      = DispatchRaysIndex().xy;
  uint2 launch_dimensions = DispatchRaysDimensions().xy;

  Texture2DArray<float4>      probe_irradiance  = DEREF(g_Srt.probe_irradiance);
  RWTexture2DArray<float4>    ray_data          = DEREF(g_Srt.ray_data);
  ConstantBuffer<DDGIVolDesc> vol_desc          = DEREF(g_Srt.vol_desc);

  DirectionalLight            directional_light = g_ViewportBuffer.directional_light;

  int ray_index         = DispatchRaysIndex().x;
  int probe_plane_index = DispatchRaysIndex().y;
  int plane_index       = DispatchRaysIndex().z;


  int probes_per_plane  = get_probes_per_plane(vol_desc);

  int probe_index       = (plane_index * probes_per_plane) + probe_plane_index;

  int3 probe_coords;
  probe_coords.x        = probe_index % vol_desc.probe_count.x;
  probe_coords.y        = probe_index / (vol_desc.probe_count.x * vol_desc.probe_count.z);
  probe_coords.z        = (probe_index / vol_desc.probe_count.x) % vol_desc.probe_count.z;

  float3 probe_ws_pos   = get_probe_ws_pos(probe_coords, vol_desc);
  float3 probe_ray_dir  = get_probe_ray_dir(ray_index, vol_desc);
  uint3  output_coords  = get_ray_data_texel_coords(ray_index, probe_index, vol_desc);

  RayDesc ray;
  ray.Origin    = probe_ws_pos;
  ray.Direction = probe_ray_dir;
  ray.TMin      = 0.0f;
  ray.TMax      = vol_desc.probe_max_ray_distance;

  Payload payload = (Payload)0;
  TraceRay(g_AccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 0, 0, ray, payload);
  if (probe_index == vol_desc.debug_ray_probe || vol_desc.debug_ray_probe >= vol_desc.probe_count.x * vol_desc.probe_count.y * vol_desc.probe_count.z)
  {
    debug_draw_line(probe_ws_pos, probe_ws_pos + probe_ray_dir, float3(1.0, 0.0, 0.0));
  }

  if (ray_index == 0)
  {
    debug_draw_sphere(probe_ws_pos, 0.1, float3(1.0, 1.0, 1.0));
  }


  if (payload.t < 0.0f)
  {
    // TODO(Brandon): On miss, we'll want to use the sky radiance instead of just the directional light
    ray_data[output_coords] = float4(directional_light.diffuse.rgb * directional_light.illuminance * 0.0001f, 1e27f); 
    return;
  }

  if (payload.hit_kind == HIT_KIND_TRIANGLE_BACK_FACE)
  {
    // Decrease hit distance on a backface hit by 80% to decrease the influence of the probe during irradiance sampling
    ray_data[output_coords].w = -payload.t * 0.2f;
    return;
  }


  // Direct lighting and shadowing
  float  shadow_atten = saturate(
    light_visibility(
      directional_light.direction.xyz,
      payload.ws_pos,
      payload.normal,
      1e27f,
      0.001f
    )
  );

  // TODO(bshihabi): Get the material diffuse value
  Lux3  directional_illuminance;
  directional_illuminance.m_Value = directional_light.illuminance * directional_light.diffuse.xyz;

  BSDF  directional_bsdf      = lambertian_diffuse_bsdf(payload.normal, directional_light.direction.xyz, 1.0f);
  Nits3 directional_luminance = directional_bsdf * directional_illuminance.attenuated(shadow_atten);
  
  #if 0
  // Indirect lighting
  float3 surface_bias = get_surface_bias(payload.normal, ray.Direction, vol_desc);

  float3 indirect = get_vol_irradiance(
    payload.ws_pos,
    surface_bias,
    payload.normal,
    vol_desc,
    probe_irradiance
  );
  #endif

  // TODO(Brandon): Get this from the actual payload data
  float3 albedo = 1.0f;

  // Write everything back out
  float3 luminance = directional_luminance.m_Value; // (direct_diffuse_lighting + saturate(indirect));
  ray_data[output_coords] = float4(saturate(luminance), payload.t);
}

[shader("closesthit")]
void hit(inout Payload payload, BuiltInTriangleIntersectionAttributes attr)
{
  payload.t = RayTCurrent();
  payload.hit_kind = HitKind();

  Vertex vertex  = get_vertex(attr);
  payload.ws_pos = vertex.position.xyz;
  payload.normal = vertex.normal.xyz;
  payload.uv     = vertex.uv.xy;
}

[shader("miss")]
void miss(inout Payload payload)
{
  payload.t = -1.0f;
}