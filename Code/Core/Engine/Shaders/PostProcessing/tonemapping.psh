#include "../root_signature.hlsli"
#include "../interlop.hlsli"

struct PSInput
{
  float4 position : SV_POSITION;
  float2 uv : TEXCOORD0;
};

ConstantBuffer<PostProcessingRenderResources> render_resources : register(b0);

// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
float3 aces_rec709_100nits_odt(float3 x)
{
  float a = 2.51f;
  float b = 0.03f;
  float c = 2.43f;
  float d = 0.59f;
  float e = 0.14f;
  return saturate((x*(a*x + b)) / (x*(c*x + d) + e));
}

// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
float3 aces_rec2020_1000nits_odt(float3 x)
{
  float a = 15.8f;
  float b = 2.12f;
  float c = 1.2f;
  float d = 5.92f;
  float e = 1.9f;
  return (x * (a * x + b)) / (x * (c * x + d) + e);
}

// TODO(bshihabi): Add custom aces approximation for dynamic output luminance scaling

float3 less_than(float3 f, float value)
{
  return float3(
    (f.x < value) ? 1.f : 0.f,
    (f.y < value) ? 1.f : 0.f,
    (f.z < value) ? 1.f : 0.f);
}

float3 linear_to_srgb(float3 rgb)
{
  rgb = clamp(rgb, 0.0f, 1.0f);
  return lerp(
    pow(rgb * 1.055f, 1.0f / 2.4f) - 0.055f,
    rgb * 12.92f,
    less_than(rgb, 0.0031308f)
  );
}

float3 linear_to_pq(float3 rgb)
{
  rgb      /= 100.0f;
  float m1  = 2610.0 / 4096.0 / 4;
  float m2  = 2523.0 / 4096.0 * 128;
  float c1  = 3424.0 / 4096.0;
  float c2  = 2413.0 / 4096.0 * 32;
  float c3  = 2392.0 / 4096.0 * 32;
  float3 Lp = pow(rgb, m1);
  return pow((c1 + c2 * Lp) / (1 + c3 * Lp), m2);
}

[RootSignature(BINDLESS_ROOT_SIGNATURE)]
float4 PS_ToneMapping(PSInput IN) : SV_TARGET
{
  Texture2D<float4> input = ResourceDescriptorHeap[render_resources.texture];
  float3 color = input.Sample(g_BilinearSampler, IN.uv).rgb;

  // TODO(bshihabi): Switch to SDR tone mapping if display doesn't support HDR
  color = aces_rec2020_1000nits_odt(color);
#if 0 
  if (IN.uv.x > 0.5)
  {
    color = aces_rec709_100nits_odt(color);
  }
#endif
  color = linear_to_pq(color);
  return float4(color, 1.0f);
}